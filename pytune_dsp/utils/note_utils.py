import numpy as np

# Dictionnaire des noms en notation anglo-saxonne et solfÃ¨ge
NOTE_TO_MIDI = {
    # Anglo-saxon
    "C": 0,
    "C#": 1, "Câ™¯": 1, "Db": 1, "Dâ™­": 1,
    "D": 2,
    "D#": 3, "Dâ™¯": 3, "Eb": 3, "Eâ™­": 3,
    "E": 4,
    "F": 5,
    "F#": 6, "Fâ™¯": 6, "Gb": 6, "Gâ™­": 6,
    "G": 7,
    "G#": 8, "Gâ™¯": 8, "Ab": 8, "Aâ™­": 8,
    "A": 9,
    "A#": 10, "Aâ™¯": 10, "Bb": 10, "Bâ™­": 10,
    "B": 11,

    # SolfÃ¨ge latin
    "Do": 0,
    "Do#": 1, "Doâ™¯": 1, "RÃ©b": 1, "RÃ©â™­": 1,
    "RÃ©": 2,
    "RÃ©#": 3, "RÃ©â™¯": 3, "Mib": 3, "Miâ™­": 3,
    "Mi": 4,
    "Fa": 5,
    "Fa#": 6, "Faâ™¯": 6, "Solb": 6, "Solâ™­": 6,
    "Sol": 7,
    "Sol#": 8, "Solâ™¯": 8, "Lab": 8, "Laâ™­": 8,
    "La": 9,
    "La#": 10, "Laâ™¯": 10, "Sib": 10, "Siâ™­": 10,
    "Si": 11,
}

def note_to_midi(note: str) -> int:
    """
    Convertit une note (ex: 'A4', 'C#3', 'Doâ™¯4', 'RÃ©b5') en numÃ©ro MIDI.
    """
    # SÃ©parer nom de note et octave
    name = ''.join([c for c in note if not c.isdigit()])
    octave = int(''.join([c for c in note if c.isdigit()]))

    if name not in NOTE_TO_MIDI:
        raise ValueError(f"Note inconnue: {note}")

    return 12 * (octave + 1) + NOTE_TO_MIDI[name]

def midi_to_freq(midi: int, a4: float = 440.0) -> float:
    """Convertit un numÃ©ro MIDI en frÃ©quence (Hz)."""
    return a4 * 2 ** ((midi - 69) / 12)

def note_to_freq(note: str, a4: float = 440.0) -> float:
    """Convertit une note (ex: 'A4', 'Doâ™¯4') en frÃ©quence (Hz)."""
    return midi_to_freq(note_to_midi(note), a4)

def freq_to_midi(freq: float, a4: float = 440.0) -> int:
    """Convertit une frÃ©quence (Hz) en numÃ©ro MIDI arrondi."""
    return int(round(69 + 12 * np.log2(freq / a4)))

def freq_to_note(
    freq: float,
    a4: float = 440.0,
    use_solfÃ¨ge: bool = False,
    tol_cents: float = 50.0,
) -> str:
    """
    Convertit une frÃ©quence en nom de note.
    
    - Par dÃ©faut en notation anglo-saxonne ('A4')
    - Si use_solfÃ¨ge=True â†’ notation latine ('La4')
    - tol_cents: tolÃ©rance en cents pour lâ€™arrondi
    
    Exemple: 445 Hz â†’ 'A4' (Ã©cart ~20 cents)
    """
    # Calcul MIDI "flottant"
    midi_exact = 69 + 12 * np.log2(freq / a4)
    midi_rounded = int(round(midi_exact))
    cents_off = 1200 * np.log2(freq / midi_to_freq(midi_rounded, a4))

    # VÃ©rifie si dans la tolÃ©rance
    if abs(cents_off) > tol_cents:
        raise ValueError(
            f"FrÃ©quence {freq:.2f} Hz trop Ã©loignÃ©e de toute note (Ã©cart {cents_off:.1f} cents)"
        )
    """
        freq_to_note(440)             # "A4"
        freq_to_note(440, True)       # "La4"
        freq_to_note(445)             # "A4" (Ã©cart ~20 cents)
        freq_to_note(455)             # ValueError (Ã©cart ~60 cents > tolÃ©rance)
        freq_to_note(277, True)       # "Doâ™¯4"
            """
    octave = midi_rounded // 12 - 1
    pitch_class = midi_rounded % 12

    if use_solfÃ¨ge:
        mapping = {
            0: "Do", 1: "Doâ™¯", 2: "RÃ©", 3: "Miâ™­", 4: "Mi",
            5: "Fa", 6: "Faâ™¯", 7: "Sol", 8: "Solâ™¯", 9: "La",
            10: "Siâ™­", 11: "Si",
        }
    else:
        mapping = {
            0: "C", 1: "Câ™¯", 2: "D", 3: "Eâ™­", 4: "E",
            5: "F", 6: "Fâ™¯", 7: "G", 8: "Gâ™¯", 9: "A",
            10: "Bâ™­", 11: "B",
        }

    return f"{mapping[pitch_class]}{octave}"

# ðŸ”¹ Nouveau : obtenir triplet (midi, nom, freq) directement
def freq_to_midi_note_freq(freq: float, a4: float = 440.0, use_solfÃ¨ge: bool = False):
    midi = freq_to_midi(freq, a4)
    note = freq_to_note(freq, a4, use_solfÃ¨ge=use_solfÃ¨ge)
    return midi, note, midi_to_freq(midi, a4)